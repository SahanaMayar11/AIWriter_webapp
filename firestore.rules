rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create, update, get, delete, list) if the user is the owner of the document.
     * @deny (create, update, get, delete) if the user is not the owner of the document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      // Self-creation: A user can create their own document.
      allow create: if isOwner(userId);

      // Update: Only the owner can update
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to draft history documents.
     * @path /users/{userId}/draftHistories/{draftHistoryId}
     * @allow (create, update, get, delete, list) if the user is the owner of the parent user document.
     * @deny (create, update, get, delete) if the user is not the owner of the parent user document.
     * @principle Enforces document ownership for all operations on draft histories.
     */
    match /users/{userId}/draftHistories/{draftHistoryId} {
      // Reuse the isOwner function from the /users/{userId} match block.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the owner to list their own draft histories.
      allow list: if isOwner(userId);
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{adminId}
     * @allow (get) if the user is signed in and is requesting their own admin document.
     * @allow (create) if the user is signed in and is creating their own admin document.
     * @deny (create, update, get, delete, list) if the user is not signed in.
     * @principle Restricts access to admin role documents based on authentication and ownership.
     */
    match /roles_admin/{adminId} {

      function isOwner(adminId) {
        return request.auth != null && request.auth.uid == adminId;
      }

      allow get: if isOwner(adminId);
      allow list: if false; // Listing admins is not permitted.
      allow create: if isOwner(adminId);
      allow update: if request.auth.uid == adminId;
      allow delete: if request.auth.uid == adminId;
    }
  }
}