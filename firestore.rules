/**
 * @fileoverview Firestore Security Rules for SpellAura AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and their associated drafts,
 * with a separate mechanism for managing admin privileges. All data access is predicated on
 * the authenticated user's ID matching the document or parent document's user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, owned by the user with ID {userId}.
 * - /users/{userId}/draftHistories/{draftHistoryId}: Stores draft histories, owned by the user with ID {userId}.
 * - /roles_admin/{adminId}: Stores admin user information. Existence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - User data is namespaced under `/users/{userId}` to enforce ownership and prevent unauthorized access.
 * - Draft histories are stored as subcollections of user documents, reinforcing the ownership model.
 * - Admin privileges are granted based on the existence of a document in the `/roles_admin` collection,
 *   avoiding the need for complex role-based access control lists within user documents.
 * - Listing operations are restricted to the owner for user-specific data.
 *
 * Denormalization for Authorization:
 * - User ID is embedded within the paths for user data and draft histories to avoid `get()` calls in security rules.
 *   This enables fast and efficient ownership checks based on the path.
 *
 * Structural Segregation:
 * - Admin user data is stored in a separate top-level collection (`/roles_admin`) to isolate admin privileges
 *   and simplify security rules. This prevents accidental exposure of admin data through user-specific rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/users/{userId}` collection, ensuring only the authenticated user can read and write their own data.
     * @path /users/{userId}
     * @allow (create, update, get, delete) User with ID "gdXm2RaSfIbqL4QeazTU2aJjHCm2" can perform all operations on their own document.
     * @deny (create, update, get, delete) User with ID "anotherUserId" cannot perform any operations on user with ID "gdXm2RaSfIbqL4QeazTU2aJjHCm2"'s document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/draftHistories/{draftHistoryId}` collection, ensuring only the authenticated user can read and write their own drafts.
     * @path /users/{userId}/draftHistories/{draftHistoryId}
     * @allow (create, update, get, delete) User with ID "gdXm2RaSfIbqL4QeazTU2aJjHCm2" can perform all operations on their own draft history entries.
     * @deny (create, update, get, delete) User with ID "anotherUserId" cannot perform any operations on user with ID "gdXm2RaSfIbqL4QeazTU2aJjHCm2"'s draft history entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/draftHistories/{draftHistoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/roles_admin/{adminId}` collection, allowing only authenticated users to read admin roles.  Write access is denied.
     * @path /roles_admin/{adminId}
     * @allow get Authenticated user can get admin roles.
     * @deny create Non-admin users cannot create admin roles.
     * @principle Restricts write access to admin role documents.
     */
    match /roles_admin/{adminId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing all admins is not permitted.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}