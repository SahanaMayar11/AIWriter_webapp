/**
 * @fileoverview Firestore Security Rules for SpellAura AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and drafts,
 * with admin privileges managed through a dedicated collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/draftHistories/{draftHistoryId}: Stores draft history for each user.
 * - /roles_admin/{adminId}: Stores admin user information.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile and drafts).
 * - Listing other users' drafts is disallowed.
 * - Admin privileges are granted based on the existence of a document in the /roles_admin collection.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used for users and drafts to avoid `get()` calls in security rules. The `userId` is present in the path and compared to `request.auth.uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user exists and the user IDs match, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the request is made by an admin user.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId in path and document data.
     * @allow (get, update, delete) Signed-in user with matching userId in path.
     * @deny (create) Signed-in user with mismatched userId in path and document data.
     * @deny (get, update, delete) Signed-in user with mismatched userId in path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for draft history documents under a user.
     * @path /users/{userId}/draftHistories/{draftHistoryId}
     * @allow (create) Signed-in user with matching userId in path.
     * @allow (get, list, update, delete) Signed-in user with matching userId in path.
     * @deny (create) Signed-in user with mismatched userId in path.
     * @deny (get, list, update, delete) Signed-in user with mismatched userId in path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/draftHistories/{draftHistoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin role documents.
     * @path /roles_admin/{adminId}
     * @allow (get) Any signed-in user.
     * @allow (create, update, delete) Only allow if the user is an admin.
     * @deny (create) Non admin users.
     * @principle Restricts creation, update, and deletion to existing admins, allows anyone to read the admin list.
     */
    match /roles_admin/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}