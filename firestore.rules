rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.  Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the user is the owner of the profile (request.auth.uid == userId).
     * @allow (list) if the user is the owner of the profile (request.auth.uid == userId)
     * @deny (create, update, delete) if the user is not the owner of the profile (request.auth.uid != userId).
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for draft histories.  Users can only read and write their own draft histories.
     * @path /users/{userId}/draftHistories/{draftHistoryId}
     * @allow (create, update, get, delete) if the user is the owner of the draft history (request.auth.uid == userId).
     * @allow (list) if the user is the owner of the draft history (request.auth.uid == userId).
     * @deny (create, update, delete) if the user is not the owner of the draft history (request.auth.uid != userId).
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId}/draftHistories/{draftHistoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages admin user roles. The existence of a document in this collection grants admin privileges.
     * @path /roles_admin/{adminId}
     * @allow get, list: if false; // No one can query the list of admins or get a specific admin directly through rules. Admin status is checked via backend functions.
     * @allow create: if false; // No one can create an admin document via direct client write.
     * @allow update: if false; // No one can update an admin document via direct client write.
     * @allow delete: if false; // No one can delete an admin document via direct client write.
     */
    match /roles_admin/{adminId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}